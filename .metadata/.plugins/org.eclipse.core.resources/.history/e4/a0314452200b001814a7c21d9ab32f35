package net.zive.shibayu.cli;

/**
 * CLI基底クラス.
 * @author Yu.Sba
 *
 */
public abstract class BaseCli {
    /**
     * リターンコード(正常終了).
     */
    public static final int RET_CODE_NORMAL_END = 0;

    /**
     * リターンコード(引数エラー).
     */
    public static final int RET_CODE_ARG_ERR = 1;

    /**
     * リターンコード(ヘルプ表示).
     */
    public static final int RET_CODE_HELP = 9;

    /**
     * リターンコード(システムエラー).
     */
    public static final int RET_SYSTEM_ERR = -9;

    /**
     * 標準入力モード.
     */
    private boolean systemInMode = false;

    /**
     * 基礎データ（第１引数 or 標準入力から受け取った値）.
     */
    private String baseData = null;

    /**
     * CLIコマンド実行.
     * @param args コマンド行引数.
     */
    public void exec(final String[] args) {
        if (checkHelp(args)) {
            System.out.println(helpString());
            System.exit(RET_CODE_HELP);
            return;
        }
        checkBaseArgs(args);
    }

    /**
     * 標準入力モードを返却する.
     * @return true:標準入力モード、false:ファイル入力モード
     */
    protected boolean getSystemInMode() {
        return systemInMode;
    }

    /**
     * 基礎データ（第１引数 or 標準入力から受け取った値を返す.
     * @return 基礎データ（第１引数 or 標準入力から受け取った値
     */
    protected String getBaseData() {
        return baseData;
    }

    /**
     * ヘルプ表示チェック.
     * @param args コマンド引数
     * @return true:ヘルプ表示、false:ヘルプ表示なし
     */
    private boolean checkHelp(final String[] args) {
        for (String arg : args) {
            if ("--help".equals(arg)) {
                return true;
            } else if ("-h".equals(arg)) {
                return true;
            }
        }
        return false;
    }

    /**
     * 第一引数チェック.
     * @param args 引数
     */
    private void checkBaseArgs(final String[] args) {
        if (args.length == 0) {
            systemInMode = true;
        } else if (args[0].length() == 0) {
            systemInMode = true;
        } else if (args[0].substring(0, 1).equals("-")) {
            systemInMode = true;
        } else {
            systemInMode = false;
            baseData = args[0];
        }
    }

    /**
     * コマンド引数チェック.
     * @param args コマンド引数
     * @return true:成功、false:チェックエラー
     */
    protected abstract boolean checkArgs(String[] args);

    /**
     * メイン前処理.
     * @throws Exception エラー
     */
    protected abstract void beforeAccept() throws Exception;

    /**
     * メイン処理.
     * @param data 基礎データ
     * @throws Exception エラー
     */
    protected abstract void accept(String data) throws Exception;

    /**
     * メイン後処理.
     * @throws Exception エラー
     */
    protected abstract void afterAccept() throws Exception;

    /**
     * ヘルプメッセージを返す.
     * @return ヘルプメッセージ
     */
    protected abstract String helpString();

    /**
     * Usageを返す.
     * @return ヘルプメッセージ
     */
    protected abstract String usageString();
}
