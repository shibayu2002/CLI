package net.zive.shibayu.cli;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import gnu.getopt.Getopt;

/**
 * projection（射影）コマンド.
 * @author Yu.Sba
 *
 */
public class JProjection extends BaseCli {
    /**
     * ファイルパス.
     */
    private File file = null;

    /**
     * 表示列番号.
     */
    private String[] cols = null;

    @Override
    protected final boolean checkArgs(final String[] args) {
        Getopt g = new Getopt(this.getClass().getName(), args, "c:");

        int c = -1;
        while ((c = g.getopt()) != -1) {
            switch (c) {
            case 'c':
                cols = g.getOptarg().split(",");
                break;
            default:
                return false;
            }
        }
        return true;
    }

    @Override
    protected final void peform(final String data) throws Exception {
        BufferedReader br = new BufferedReader(
                new FileReader(new File(data.trim())));

        String str = null;
        long cnt = 0;
        try {
            while ((str = br.readLine()) != null) {
                if (cnt >= startLine - 1) {
                    System.out.println(str);
                }
                cnt = cnt + 1;
                if ((endLine != -1) && (cnt >= endLine)) {
                    break;
                }
            }
        } catch (IOException e) {
            throw e;
        } finally {
            br.close();
        }
    }

    @Override
    protected final String helpString() {
        StringBuilder stb = new StringBuilder();
        stb.append("<概要>\n");
        stb.append("projection（射影）コマンド。\n");
        stb.append("指定されたCSVデータからコマンドラインで指定された列を抜き出し標準出力に出力する。\n\n");
        stb.append("<コマンド>\n");
        stb.append("cat [DATA] -c:カンマ区切り列番号 \n\n");
        stb.append("<引数>\n");
        stb.append("DATA:一行のCSVデータ(※省略可)\n");
        stb.append("* DATAを省略した場合は標準入力からCSVデータを受取る。");
        stb.append("標準入力からは複数行のデータの受け取りが可能\n\n");
        stb.append("<オプション>\n");
        stb.append("-c:カンマ区切り列番号（例.-c 1,2,5を指定した場合、DATAの1,2,5列目を出力する。）\n");
        return stb.toString();
    }

    @Override
    protected final String usageString() {
        return "Usage:jprojection [DATA] -c カンマ区切り列番号";
    }
    
    /**
     * 引数を列番号の配列に変換する.
     * @param arg 引数
     * @return 列番号の配列
     */
    private int[] convArgsToRows(final String arg) {
        String[] tmp = arg.split(",");
        int[] cols = new int[tmp.length];
        for (int i = 0; i < cols.length; i++) {
            cols[i] = Integer.parseInt(tmp[i]);
        }
        return cols;
    }

    /**
     * メイン処理.
     * @param args コマンド引数
     */
    public static void main(final String[] args) {
        (new JProjection()).exec(args);
    }
}
